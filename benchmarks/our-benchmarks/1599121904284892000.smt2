(set-info :smt-lib-version 2.6)
(set-logic QF_FP)
(set-info :source |
Generated by: Anastasiia Izycheva, Eva Darulova
Generated on: 2020-09-11
Generator: Pine (using Z3 Python API)
Application: Check inductiveness of a loop invariant
Target solver: CVC4

These benchmarks were generated while developing the tool Pine [1], which uses
CVC4/Z3 to check inductiveness of invariants. The work is described in [2].

[1] https://github.com/izycheva/pine
[2] A.Izycheva, E.Darulova, H.Seidl, SAS'20, "Counterexample- and Simulation-Guided Floating-Point Loop Invariant Synthesis"

 Loop:
   u' := u + 0.01 * v
   v' := v + 0.01 * (-0.5 * v - 9.81 * (u - (u*u*u)/6.0 + (u*u*u*u*u)/120.0))

 Input ranges:
   u in [0.0,0.0]
   v in [2.0,3.0]

 Invariant:
   -0.17*u + -0.02*v + 1.0*u^2 + 0.04*u*v + 0.11*v^2 <= 1.25
 and
   u in [-1.1,1.2]
   v in [-3.3,3.4]

 Query: Loop and Invariant and not Invariant'
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun u!FP () (_ FloatingPoint 8 24))
(declare-fun v!FP () (_ FloatingPoint 8 24))
(declare-fun uFP () (_ FloatingPoint 8 24))
(declare-fun vFP () (_ FloatingPoint 8 24))
(assert
 (let ((?x273 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7b #b11000010100011110101110) v!FP) v!FP)))
 (let ((?x203 (fp.add roundNearestTiesToEven ?x273 (fp.mul roundNearestTiesToEven (fp #b1 #x7c #b01011100001010001111010) u!FP))))
 (let ((?x114 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7a #b01000111101011100001010) u!FP) v!FP)))
 (let ((?x141 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7f #b00000000000000000000000) u!FP) u!FP)))
 (let ((?x208 (fp.add roundNearestTiesToEven ?x141 (fp.add roundNearestTiesToEven ?x114 ?x203))))
 (let ((?x362 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b1 #x79 #b01000111101011100001010) v!FP) ?x208)))
 (let (($x186 (fp.leq ?x362 (fp #b0 #x7f #b01000000000000000000000))))
 (let (($x308 (fp.leq v!FP (fp #b0 #x80 #b10110011001100110011001))))
 (let (($x213 (fp.leq (fp #b1 #x80 #b10100110011001100110011) v!FP)))
 (let (($x209 (fp.leq u!FP (fp #b0 #x7f #b00110011001100110011001))))
 (let (($x257 (fp.leq (fp #b1 #x7f #b00011001100110011001100) u!FP)))
 (let ((?x162 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven uFP uFP) uFP)))
 (let ((?x167 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x162 uFP) uFP)))
 (let ((?x169 (fp.div roundNearestTiesToEven ?x167 (fp #b0 #x85 #b11100000000000000000000))))
 (let ((?x164 (fp.div roundNearestTiesToEven ?x162 (fp #b0 #x81 #b10000000000000000000000))))
 (let ((?x170 (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven uFP ?x164) ?x169)))
 (let ((?x172 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp.neg (fp #b0 #x7e #b00000000000000000000000)) vFP) (fp.mul roundNearestTiesToEven (fp #b0 #x82 #b00111001111010111000010) ?x170))))
 (let ((?x174 (fp.add roundNearestTiesToEven vFP (fp.mul roundNearestTiesToEven (fp #b0 #x78 #b01000111101011100001010) ?x172))))
 (let ((?x155 (fp.add roundNearestTiesToEven uFP (fp.mul roundNearestTiesToEven (fp #b0 #x78 #b01000111101011100001010) vFP))))
 (let (($x156 (fp.eq u!FP ?x155)))
 (let ((?x135 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7b #b11000010100011110101110) vFP) vFP)))
 (let ((?x121 (fp.add roundNearestTiesToEven ?x135 (fp.mul roundNearestTiesToEven (fp #b1 #x7c #b01011100001010001111010) uFP))))
 (let ((?x205 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7a #b01000111101011100001010) uFP) vFP)))
 (let ((?x119 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7f #b00000000000000000000000) uFP) uFP)))
 (let ((?x350 (fp.add roundNearestTiesToEven ?x119 (fp.add roundNearestTiesToEven ?x205 ?x121))))
 (let ((?x131 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b1 #x79 #b01000111101011100001010) vFP) ?x350)))
 (let (($x259 (fp.leq ?x131 (fp #b0 #x7f #b01000000000000000000000))))
 (let (($x227 (fp.leq vFP (fp #b0 #x80 #b10110011001100110011001))))
 (let (($x29 (fp.leq (fp #b1 #x80 #b10100110011001100110011) vFP)))
 (let (($x198 (fp.leq uFP (fp #b0 #x7f #b00110011001100110011001))))
 (let (($x16 (fp.leq (fp #b1 #x7f #b00011001100110011001100) uFP)))
 (and (and (and $x16 $x198 $x29 $x227) $x259 ) (and $x156 (fp.eq v!FP ?x174)) (or (not $x257) (not $x209) (not $x213) (not $x308) (not $x186)))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
