(set-info :smt-lib-version 2.6)
(set-logic QF_FP)
(set-info :source |
Generated by: Anastasiia Izycheva, Eva Darulova
Generated on: 2020-09-11
Generator: Pine (using Z3 Python API)
Application: Check inductiveness of a loop invariant
Target solver: CVC4

These benchmarks were generated while developing the tool Pine [1], which uses
CVC4/Z3 to check inductiveness of invariants. The work is described in [2].

[1] https://github.com/izycheva/pine
[2] A.Izycheva, E.Darulova, H.Seidl, SAS'20, "Counterexample- and Simulation-Guided Floating-Point Loop Invariant Synthesis"

 Loop:
   u' := u + 0.01 * v
   v' := v + 0.01 * (-0.5 * v - 9.81 * (u - (u*u*u)/6.0 + (u*u*u*u*u)/120.0))

 Input ranges:
   u in [0.0,0.0]
   v in [2.0,3.0]

 Invariant:
   -0.15*u + -0.03*v + 1.0*u^2 + 0.03*u*v + 0.1*v^2 <= 0.86
 and
   u in [-0.9,1.0]
   v in [-2.8,3.0]

 Query: Loop and Invariant and not Invariant'
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun u!FP () (_ FloatingPoint 8 24))
(declare-fun v!FP () (_ FloatingPoint 8 24))
(declare-fun uFP () (_ FloatingPoint 8 24))
(declare-fun vFP () (_ FloatingPoint 8 24))
(assert
 (let ((?x239 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7b #b10011001100110011001100) v!FP) v!FP)))
 (let ((?x135 (fp.add roundNearestTiesToEven ?x239 (fp.mul roundNearestTiesToEven (fp #b1 #x7c #b00110011001100110011001) u!FP))))
 (let ((?x127 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x79 #b11101011100001010001111) u!FP) v!FP)))
 (let ((?x141 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7f #b00000000000000000000000) u!FP) u!FP)))
 (let ((?x234 (fp.add roundNearestTiesToEven ?x141 (fp.add roundNearestTiesToEven ?x127 ?x135))))
 (let ((?x129 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b1 #x79 #b11101011100001010001111) v!FP) ?x234)))
 (let (($x150 (fp.leq ?x129 (fp #b0 #x7e #b10111000010100011110101))))
 (let (($x137 (fp.leq v!FP (fp #b0 #x80 #b10000000000000000000000))))
 (let (($x349 (fp.leq (fp #b1 #x80 #b01100110011001100110011) v!FP)))
 (let (($x205 (fp.leq u!FP (fp #b0 #x7f #b00000000000000000000000))))
 (let (($x198 (fp.leq (fp #b1 #x7e #b11001100110011001100110) u!FP)))
 (let ((?x162 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven uFP uFP) uFP)))
 (let ((?x167 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x162 uFP) uFP)))
 (let ((?x169 (fp.div roundNearestTiesToEven ?x167 (fp #b0 #x85 #b11100000000000000000000))))
 (let ((?x164 (fp.div roundNearestTiesToEven ?x162 (fp #b0 #x81 #b10000000000000000000000))))
 (let ((?x170 (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven uFP ?x164) ?x169)))
 (let ((?x172 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp.neg (fp #b0 #x7e #b00000000000000000000000)) vFP) (fp.mul roundNearestTiesToEven (fp #b0 #x82 #b00111001111010111000010) ?x170))))
 (let ((?x174 (fp.add roundNearestTiesToEven vFP (fp.mul roundNearestTiesToEven (fp #b0 #x78 #b01000111101011100001010) ?x172))))
 (let ((?x155 (fp.add roundNearestTiesToEven uFP (fp.mul roundNearestTiesToEven (fp #b0 #x78 #b01000111101011100001010) vFP))))
 (let (($x156 (fp.eq u!FP ?x155)))
 (let ((?x139 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7b #b10011001100110011001100) vFP) vFP)))
 (let ((?x284 (fp.add roundNearestTiesToEven ?x139 (fp.mul roundNearestTiesToEven (fp #b1 #x7c #b00110011001100110011001) uFP))))
 (let ((?x264 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x79 #b11101011100001010001111) uFP) vFP)))
 (let ((?x119 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7f #b00000000000000000000000) uFP) uFP)))
 (let ((?x277 (fp.add roundNearestTiesToEven ?x119 (fp.add roundNearestTiesToEven ?x264 ?x284))))
 (let ((?x282 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b1 #x79 #b11101011100001010001111) vFP) ?x277)))
 (let (($x248 (fp.leq ?x282 (fp #b0 #x7e #b10111000010100011110101))))
 (let (($x104 (fp.leq vFP (fp #b0 #x80 #b10000000000000000000000))))
 (let (($x304 (fp.leq (fp #b1 #x80 #b01100110011001100110011) vFP)))
 (let (($x17 (fp.leq uFP (fp #b0 #x7f #b00000000000000000000000))))
 (let (($x281 (fp.leq (fp #b1 #x7e #b11001100110011001100110) uFP)))
 (and (and (and $x281 $x17 $x304 $x104) $x248 ) (and $x156 (fp.eq v!FP ?x174)) (or (not $x198) (not $x205) (not $x349) (not $x137) (not $x150)))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
