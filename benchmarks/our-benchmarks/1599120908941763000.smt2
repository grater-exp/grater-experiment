(set-info :smt-lib-version 2.6)
(set-logic QF_FP)
(set-info :source |
Generated by: Anastasiia Izycheva, Eva Darulova
Generated on: 2020-09-11
Generator: Pine (using Z3 Python API)
Application: Check inductiveness of a loop invariant
Target solver: CVC4

These benchmarks were generated while developing the tool Pine [1], which uses
CVC4/Z3 to check inductiveness of invariants. The work is described in [2].

[1] https://github.com/izycheva/pine
[2] A.Izycheva, E.Darulova, H.Seidl, SAS'20, "Counterexample- and Simulation-Guided Floating-Point Loop Invariant Synthesis"

 Loop:
   x' := x + 0.01 * (-2*x - 3*y + x*x)
   y' := y + 0.01 * (x + y)

 Input ranges:
   x in [0.0,0.1]
   y in [0.0,0.1]

 Invariant:
   -0.03*x + -0.11*y + 0.46*x^2 + 1.0*x*y + 0.86*y^2 <= 0.02
 and
   x in [-0.5,0.3]
   y in [-0.2,0.4]

 Query: Loop and Invariant and not Invariant'
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x!FP () (_ FloatingPoint 8 24))
(declare-fun y!FP () (_ FloatingPoint 8 24))
(declare-fun yFP () (_ FloatingPoint 8 24))
(declare-fun xFP () (_ FloatingPoint 8 24))
(assert
 (let ((?x164 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7e #b10111000010100011110101) y!FP) y!FP)))
 (let ((?x171 (fp.add roundNearestTiesToEven ?x164 (fp.mul roundNearestTiesToEven (fp #b1 #x79 #b11101011100001010001111) x!FP))))
 (let ((?x240 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7f #b00000000000000000000000) x!FP) y!FP)))
 (let ((?x162 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7d #b11010111000010100011110) x!FP) x!FP)))
 (let ((?x160 (fp.add roundNearestTiesToEven ?x162 (fp.add roundNearestTiesToEven ?x240 ?x171))))
 (let ((?x200 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b1 #x7b #b11000010100011110101110) y!FP) ?x160)))
 (let (($x130 (fp.leq ?x200 (fp #b0 #x79 #b01000111101011100001010))))
 (let (($x210 (fp.leq y!FP (fp #b0 #x7d #b10011001100110011001100))))
 (let (($x222 (fp.leq (fp #b1 #x7c #b10011001100110011001100) y!FP)))
 (let (($x133 (fp.leq x!FP (fp #b0 #x7d #b00110011001100110011001))))
 (let (($x134 (fp.leq (fp #b1 #x7e #b00000000000000000000000) x!FP)))
 (let ((?x155 (fp.mul roundNearestTiesToEven (fp #b0 #x78 #b01000111101011100001010) (fp.add roundNearestTiesToEven xFP yFP))))
 (let (($x157 (fp.eq y!FP (fp.add roundNearestTiesToEven yFP ?x155))))
 (let ((?x149 (fp.mul roundNearestTiesToEven xFP xFP)))
 (let ((?x147 (fp.mul roundNearestTiesToEven (fp #b0 #x80 #b10000000000000000000000) yFP)))
 (let ((?x148 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp.neg (fp #b0 #x80 #b00000000000000000000000)) xFP) ?x147)))
 (let ((?x151 (fp.mul roundNearestTiesToEven (fp #b0 #x78 #b01000111101011100001010) (fp.add roundNearestTiesToEven ?x148 ?x149))))
 (let (($x159 (and (fp.eq x!FP (fp.add roundNearestTiesToEven xFP ?x151)) $x157)))
 (let ((?x107 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7e #b10111000010100011110101) yFP) yFP)))
 (let ((?x137 (fp.add roundNearestTiesToEven ?x107 (fp.mul roundNearestTiesToEven (fp #b1 #x79 #b11101011100001010001111) xFP))))
 (let ((?x169 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7f #b00000000000000000000000) xFP) yFP)))
 (let ((?x139 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7d #b11010111000010100011110) xFP) xFP)))
 (let ((?x213 (fp.add roundNearestTiesToEven ?x139 (fp.add roundNearestTiesToEven ?x169 ?x137))))
 (let ((?x201 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b1 #x7b #b11000010100011110101110) yFP) ?x213)))
 (let (($x119 (fp.leq ?x201 (fp #b0 #x79 #b01000111101011100001010))))
 (let (($x163 (fp.leq yFP (fp #b0 #x7d #b10011001100110011001100))))
 (let (($x258 (fp.leq (fp #b1 #x7c #b10011001100110011001100) yFP)))
 (let (($x127 (fp.leq xFP (fp #b0 #x7d #b00110011001100110011001))))
 (let (($x185 (fp.leq (fp #b1 #x7e #b00000000000000000000000) xFP)))
 (and (and (and $x185 $x127 $x258 $x163) $x119 ) $x159 (or (not $x134) (not $x133) (not $x222) (not $x210) (not $x130)))))))))))))))))))))))))))))))))
(check-sat)
(exit)
