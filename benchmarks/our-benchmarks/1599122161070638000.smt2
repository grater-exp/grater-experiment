(set-info :smt-lib-version 2.6)
(set-logic QF_FP)
(set-info :source |
Generated by: Anastasiia Izycheva, Eva Darulova
Generated on: 2020-09-11
Generator: Pine (using Z3 Python API)
Application: Check inductiveness of a loop invariant
Target solver: CVC4

These benchmarks were generated while developing the tool Pine [1], which uses
CVC4/Z3 to check inductiveness of invariants. The work is described in [2].

[1] https://github.com/izycheva/pine
[2] A.Izycheva, E.Darulova, H.Seidl, SAS'20, "Counterexample- and Simulation-Guided Floating-Point Loop Invariant Synthesis"

 Loop:
   u' := u + 0.01 * v
   v' := v + 0.01 * (-0.5 * v - 9.81 * u)

 Input ranges:
   u in [0.0,0.0]
   v in [2.0,3.0]

 Invariant:
   -0.89*u + 0.12*v + 1.0*u^2 + -0.06*u*v + 0.08*v^2 <= 1.16
 and
   u in [-0.5,1.6]
   v in [-4.3,3.0]

 Query: Loop and Invariant and not Invariant'
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun u!FP () (_ FloatingPoint 8 24))
(declare-fun v!FP () (_ FloatingPoint 8 24))
(declare-fun uFP () (_ FloatingPoint 8 24))
(declare-fun vFP () (_ FloatingPoint 8 24))
(assert
 (let ((?x187 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7b #b01000111101011100001010) v!FP) v!FP)))
 (let ((?x199 (fp.add roundNearestTiesToEven ?x187 (fp.mul roundNearestTiesToEven (fp #b1 #x7e #b11000111101011100001010) u!FP))))
 (let ((?x207 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b1 #x7a #b11101011100001010001111) u!FP) v!FP)))
 (let ((?x127 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7f #b00000000000000000000000) u!FP) u!FP)))
 (let ((?x236 (fp.add roundNearestTiesToEven ?x127 (fp.add roundNearestTiesToEven ?x207 ?x199))))
 (let ((?x256 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7b #b11101011100001010001111) v!FP) ?x236)))
 (let (($x177 (fp.leq ?x256 (fp #b0 #x7f #b00101000111101011100001))))
 (let (($x123 (fp.leq v!FP (fp #b0 #x80 #b10000000000000000000000))))
 (let (($x243 (fp.leq (fp #b1 #x81 #b00010011001100110011001) v!FP)))
 (let (($x170 (fp.leq u!FP (fp #b0 #x7f #b10011001100110011001100))))
 (let (($x94 (fp.leq (fp #b1 #x7e #b00000000000000000000000) u!FP)))
 (let ((?x147 (fp.mul roundNearestTiesToEven (fp #b0 #x82 #b00111001111010111000010) uFP)))
 (let ((?x148 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp.neg (fp #b0 #x7e #b00000000000000000000000)) vFP) ?x147)))
 (let ((?x150 (fp.add roundNearestTiesToEven vFP (fp.mul roundNearestTiesToEven (fp #b0 #x78 #b01000111101011100001010) ?x148))))
 (let ((?x141 (fp.add roundNearestTiesToEven uFP (fp.mul roundNearestTiesToEven (fp #b0 #x78 #b01000111101011100001010) vFP))))
 (let (($x142 (fp.eq u!FP ?x141)))
 (let ((?x185 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7b #b01000111101011100001010) vFP) vFP)))
 (let ((?x81 (fp.add roundNearestTiesToEven ?x185 (fp.mul roundNearestTiesToEven (fp #b1 #x7e #b11000111101011100001010) uFP))))
 (let ((?x122 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b1 #x7a #b11101011100001010001111) uFP) vFP)))
 (let ((?x105 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7f #b00000000000000000000000) uFP) uFP)))
 (let ((?x64 (fp.add roundNearestTiesToEven ?x105 (fp.add roundNearestTiesToEven ?x122 ?x81))))
 (let ((?x284 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7b #b11101011100001010001111) vFP) ?x64)))
 (let (($x7 (fp.leq ?x284 (fp #b0 #x7f #b00101000111101011100001))))
 (let (($x92 (fp.leq vFP (fp #b0 #x80 #b10000000000000000000000))))
 (let (($x40 (fp.leq (fp #b1 #x81 #b00010011001100110011001) vFP)))
 (let (($x188 (fp.leq uFP (fp #b0 #x7f #b10011001100110011001100))))
 (let (($x11 (fp.leq (fp #b1 #x7e #b00000000000000000000000) uFP)))
 (and (and (and $x11 $x188 $x40 $x92) $x7 ) (and $x142 (fp.eq v!FP ?x150)) (or (not $x94) (not $x170) (not $x243) (not $x123) (not $x177)))))))))))))))))))))))))))))))
(check-sat)
(exit)
