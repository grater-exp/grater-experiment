(set-info :smt-lib-version 2.6)
(set-logic QF_FP)
(set-info :source |
Generated by: Anastasiia Izycheva, Eva Darulova
Generated on: 2020-09-11
Generator: Pine (using Z3 Python API)
Application: Check inductiveness of a loop invariant
Target solver: CVC4

These benchmarks were generated while developing the tool Pine [1], which uses
CVC4/Z3 to check inductiveness of invariants. The work is described in [2].

[1] https://github.com/izycheva/pine
[2] A.Izycheva, E.Darulova, H.Seidl, SAS'20, "Counterexample- and Simulation-Guided Floating-Point Loop Invariant Synthesis"

 Loop:
   u' := u + 0.01 * v
   v' := v + 0.01 * (-0.5 * v - 9.81 * u)

 Input ranges:
   u in [0.0,0.0]
   v in [2.0,3.0]

 Invariant:
   -0.09*u + 0.01*v + 1.0*u^2 + 0.04*u*v + 0.11*v^2 <= 1.66
 and
   u in [-1.2,1.3]
   v in [-3.9,3.7]

 Query: Loop and Invariant and not Invariant'
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun u!FP () (_ FloatingPoint 8 24))
(declare-fun v!FP () (_ FloatingPoint 8 24))
(declare-fun uFP () (_ FloatingPoint 8 24))
(declare-fun vFP () (_ FloatingPoint 8 24))
(assert
 (let ((?x218 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7b #b11000010100011110101110) v!FP) v!FP)))
 (let ((?x56 (fp.add roundNearestTiesToEven ?x218 (fp.mul roundNearestTiesToEven (fp #b1 #x7b #b01110000101000111101011) u!FP))))
 (let ((?x248 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7a #b01000111101011100001010) u!FP) v!FP)))
 (let ((?x55 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7f #b00000000000000000000000) u!FP) u!FP)))
 (let ((?x199 (fp.add roundNearestTiesToEven ?x55 (fp.add roundNearestTiesToEven ?x248 ?x56))))
 (let ((?x33 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x78 #b01000111101011100001010) v!FP) ?x199)))
 (let (($x25 (fp.leq ?x33 (fp #b0 #x7f #b10101000111101011100001))))
 (let (($x162 (fp.leq v!FP (fp #b0 #x80 #b11011001100110011001100))))
 (let (($x197 (fp.leq (fp #b1 #x80 #b11110011001100110011001) v!FP)))
 (let (($x165 (fp.leq u!FP (fp #b0 #x7f #b01001100110011001100110))))
 (let (($x241 (fp.leq (fp #b1 #x7f #b00110011001100110011001) u!FP)))
 (let ((?x206 (fp.mul roundNearestTiesToEven (fp #b0 #x82 #b00111001111010111000010) uFP)))
 (let ((?x212 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp.neg (fp #b0 #x7e #b00000000000000000000000)) vFP) ?x206)))
 (let ((?x209 (fp.add roundNearestTiesToEven vFP (fp.mul roundNearestTiesToEven (fp #b0 #x78 #b01000111101011100001010) ?x212))))
 (let ((?x83 (fp.mul roundNearestTiesToEven (fp #b0 #x78 #b01000111101011100001010) vFP)))
 (let (($x208 (fp.eq u!FP (fp.add roundNearestTiesToEven uFP ?x83))))
 (let ((?x133 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7b #b11000010100011110101110) vFP) vFP)))
 (let ((?x23 (fp.add roundNearestTiesToEven ?x133 (fp.mul roundNearestTiesToEven (fp #b1 #x7b #b01110000101000111101011) uFP))))
 (let ((?x128 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7a #b01000111101011100001010) uFP) vFP)))
 (let ((?x67 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7f #b00000000000000000000000) uFP) uFP)))
 (let ((?x193 (fp.add roundNearestTiesToEven ?x67 (fp.add roundNearestTiesToEven ?x128 ?x23))))
 (let (($x84 (fp.leq (fp.add roundNearestTiesToEven ?x83 ?x193) (fp #b0 #x7f #b10101000111101011100001))))
 (let (($x111 (fp.leq vFP (fp #b0 #x80 #b11011001100110011001100))))
 (let (($x139 (fp.leq (fp #b1 #x80 #b11110011001100110011001) vFP)))
 (let (($x38 (fp.leq uFP (fp #b0 #x7f #b01001100110011001100110))))
 (let (($x45 (fp.leq (fp #b1 #x7f #b00110011001100110011001) uFP)))
 (and (and (and $x45 $x38 $x139 $x111) $x84 ) (and $x208 (fp.eq v!FP ?x209)) (or (not $x241) (not $x165) (not $x197) (not $x162) (not $x25))))))))))))))))))))))))))))))
(check-sat)
(exit)
