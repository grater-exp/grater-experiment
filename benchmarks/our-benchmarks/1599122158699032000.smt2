(set-info :smt-lib-version 2.6)
(set-logic QF_FP)
(set-info :source |
Generated by: Anastasiia Izycheva, Eva Darulova
Generated on: 2020-09-11
Generator: Pine (using Z3 Python API)
Application: Check inductiveness of a loop invariant
Target solver: CVC4

These benchmarks were generated while developing the tool Pine [1], which uses
CVC4/Z3 to check inductiveness of invariants. The work is described in [2].

[1] https://github.com/izycheva/pine
[2] A.Izycheva, E.Darulova, H.Seidl, SAS'20, "Counterexample- and Simulation-Guided Floating-Point Loop Invariant Synthesis"

 Loop:
   u' := u + 0.01 * v
   v' := v + 0.01 * (-0.5 * v - 9.81 * u)

 Input ranges:
   u in [0.0,0.0]
   v in [2.0,3.0]

 Invariant:
   -0.61*u + -0.02*v + 1.0*u^2 + 0.02*u*v + 0.03*v^2 <= 0.23
 and
   u in [0.0,0.9]
   v in [-2.8,3.0]

 Query: Loop and Invariant and not Invariant'
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun u!FP () (_ FloatingPoint 8 24))
(declare-fun v!FP () (_ FloatingPoint 8 24))
(declare-fun uFP () (_ FloatingPoint 8 24))
(declare-fun vFP () (_ FloatingPoint 8 24))
(assert
 (let ((?x131 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x79 #b11101011100001010001111) v!FP) v!FP)))
 (let ((?x175 (fp.add roundNearestTiesToEven ?x131 (fp.mul roundNearestTiesToEven (fp #b1 #x7e #b00111000010100011110101) u!FP))))
 (let ((?x129 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x79 #b01000111101011100001010) u!FP) v!FP)))
 (let ((?x127 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7f #b00000000000000000000000) u!FP) u!FP)))
 (let ((?x192 (fp.add roundNearestTiesToEven ?x127 (fp.add roundNearestTiesToEven ?x129 ?x175))))
 (let ((?x183 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b1 #x79 #b01000111101011100001010) v!FP) ?x192)))
 (let (($x176 (fp.leq ?x183 (fp #b0 #x7c #b11010111000010100011110))))
 (let (($x123 (fp.leq v!FP (fp #b0 #x80 #b10000000000000000000000))))
 (let (($x187 (fp.leq (fp #b1 #x80 #b01100110011001100110011) v!FP)))
 (let (($x121 (fp.leq u!FP (fp #b0 #x7e #b11001100110011001100110))))
 (let (($x120 (fp.leq (_ +zero 8 24) u!FP)))
 (let ((?x147 (fp.mul roundNearestTiesToEven (fp #b0 #x82 #b00111001111010111000010) uFP)))
 (let ((?x148 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp.neg (fp #b0 #x7e #b00000000000000000000000)) vFP) ?x147)))
 (let ((?x150 (fp.add roundNearestTiesToEven vFP (fp.mul roundNearestTiesToEven (fp #b0 #x78 #b01000111101011100001010) ?x148))))
 (let ((?x141 (fp.add roundNearestTiesToEven uFP (fp.mul roundNearestTiesToEven (fp #b0 #x78 #b01000111101011100001010) vFP))))
 (let (($x142 (fp.eq u!FP ?x141)))
 (let ((?x111 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x79 #b11101011100001010001111) vFP) vFP)))
 (let ((?x205 (fp.add roundNearestTiesToEven ?x111 (fp.mul roundNearestTiesToEven (fp #b1 #x7e #b00111000010100011110101) uFP))))
 (let ((?x108 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x79 #b01000111101011100001010) uFP) vFP)))
 (let ((?x105 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7f #b00000000000000000000000) uFP) uFP)))
 (let ((?x177 (fp.add roundNearestTiesToEven ?x105 (fp.add roundNearestTiesToEven ?x108 ?x205))))
 (let ((?x202 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b1 #x79 #b01000111101011100001010) vFP) ?x177)))
 (let (($x203 (fp.leq ?x202 (fp #b0 #x7c #b11010111000010100011110))))
 (let (($x92 (fp.leq vFP (fp #b0 #x80 #b10000000000000000000000))))
 (let (($x210 (fp.leq (fp #b1 #x80 #b01100110011001100110011) vFP)))
 (let (($x96 (fp.leq uFP (fp #b0 #x7e #b11001100110011001100110))))
 (let (($x87 (fp.leq (_ +zero 8 24) uFP)))
 (and (and (and $x87 $x96 $x210 $x92) $x203 ) (and $x142 (fp.eq v!FP ?x150)) (or (not $x120) (not $x121) (not $x187) (not $x123) (not $x176)))))))))))))))))))))))))))))))
(check-sat)
(exit)
