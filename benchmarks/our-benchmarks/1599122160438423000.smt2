(set-info :smt-lib-version 2.6)
(set-logic QF_FP)
(set-info :source |
Generated by: Anastasiia Izycheva, Eva Darulova
Generated on: 2020-09-11
Generator: Pine (using Z3 Python API)
Application: Check inductiveness of a loop invariant
Target solver: CVC4

These benchmarks were generated while developing the tool Pine [1], which uses
CVC4/Z3 to check inductiveness of invariants. The work is described in [2].

[1] https://github.com/izycheva/pine
[2] A.Izycheva, E.Darulova, H.Seidl, SAS'20, "Counterexample- and Simulation-Guided Floating-Point Loop Invariant Synthesis"

 Loop:
   u' := u + 0.01 * v
   v' := v + 0.01 * (-0.5 * v - 9.81 * u)

 Input ranges:
   u in [0.0,0.0]
   v in [2.0,3.0]

 Invariant:
   -0.8*u + 0.08*v + 1.0*u^2 + -0.14*u*v + 0.08*v^2 <= 0.98
 and
   u in [-0.4,1.5]
   v in [-3.9,3.0]

 Query: Loop and Invariant and not Invariant'
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun u!FP () (_ FloatingPoint 8 24))
(declare-fun v!FP () (_ FloatingPoint 8 24))
(declare-fun uFP () (_ FloatingPoint 8 24))
(declare-fun vFP () (_ FloatingPoint 8 24))
(assert
 (let ((?x271 (fp.mul roundNearestTiesToEven (fp #b0 #x7b #b01000111101011100001010) v!FP)))
 (let ((?x289 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x271 v!FP) (fp.mul roundNearestTiesToEven (fp #b1 #x7e #b10011001100110011001100) u!FP))))
 (let ((?x34 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b1 #x7c #b00011110101110000101000) u!FP) v!FP)))
 (let ((?x127 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7f #b00000000000000000000000) u!FP) u!FP)))
 (let ((?x157 (fp.add roundNearestTiesToEven ?x127 (fp.add roundNearestTiesToEven ?x34 ?x289))))
 (let (($x226 (fp.leq (fp.add roundNearestTiesToEven ?x271 ?x157) (fp #b0 #x7e #b11110101110000101000111))))
 (let (($x123 (fp.leq v!FP (fp #b0 #x80 #b10000000000000000000000))))
 (let (($x183 (fp.leq (fp #b1 #x80 #b11110011001100110011001) v!FP)))
 (let (($x190 (fp.leq u!FP (fp #b0 #x7f #b10000000000000000000000))))
 (let (($x128 (fp.leq (fp #b1 #x7d #b10011001100110011001100) u!FP)))
 (let ((?x147 (fp.mul roundNearestTiesToEven (fp #b0 #x82 #b00111001111010111000010) uFP)))
 (let ((?x148 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp.neg (fp #b0 #x7e #b00000000000000000000000)) vFP) ?x147)))
 (let ((?x150 (fp.add roundNearestTiesToEven vFP (fp.mul roundNearestTiesToEven (fp #b0 #x78 #b01000111101011100001010) ?x148))))
 (let ((?x141 (fp.add roundNearestTiesToEven uFP (fp.mul roundNearestTiesToEven (fp #b0 #x78 #b01000111101011100001010) vFP))))
 (let (($x142 (fp.eq u!FP ?x141)))
 (let ((?x207 (fp.mul roundNearestTiesToEven (fp #b0 #x7b #b01000111101011100001010) vFP)))
 (let ((?x155 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven ?x207 vFP) (fp.mul roundNearestTiesToEven (fp #b1 #x7e #b10011001100110011001100) uFP))))
 (let ((?x234 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b1 #x7c #b00011110101110000101000) uFP) vFP)))
 (let ((?x105 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7f #b00000000000000000000000) uFP) uFP)))
 (let ((?x229 (fp.add roundNearestTiesToEven ?x105 (fp.add roundNearestTiesToEven ?x234 ?x155))))
 (let (($x223 (fp.leq (fp.add roundNearestTiesToEven ?x207 ?x229) (fp #b0 #x7e #b11110101110000101000111))))
 (let (($x92 (fp.leq vFP (fp #b0 #x80 #b10000000000000000000000))))
 (let (($x122 (fp.leq (fp #b1 #x80 #b11110011001100110011001) vFP)))
 (let (($x154 (fp.leq uFP (fp #b0 #x7f #b10000000000000000000000))))
 (let (($x36 (fp.leq (fp #b1 #x7d #b10011001100110011001100) uFP)))
 (and (and (and $x36 $x154 $x122 $x92) $x223 ) (and $x142 (fp.eq v!FP ?x150)) (or (not $x128) (not $x190) (not $x183) (not $x123) (not $x226)))))))))))))))))))))))))))))
(check-sat)
(exit)
