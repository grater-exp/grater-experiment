(set-info :smt-lib-version 2.6)
(set-logic QF_FP)
(set-info :source |
Generated by: Anastasiia Izycheva, Eva Darulova
Generated on: 2020-09-11
Generator: Pine (using Z3 Python API)
Application: Check inductiveness of a loop invariant
Target solver: CVC4

These benchmarks were generated while developing the tool Pine [1], which uses
CVC4/Z3 to check inductiveness of invariants. The work is described in [2].

[1] https://github.com/izycheva/pine
[2] A.Izycheva, E.Darulova, H.Seidl, SAS'20, "Counterexample- and Simulation-Guided Floating-Point Loop Invariant Synthesis"

 Loop:
   u' := u + 0.01 * v
   v' := v + 0.01 * (-0.5 * v - 9.81 * u)

 Input ranges:
   u in [0.0,0.0]
   v in [2.0,3.0]

 Invariant:
   -0.95*u + 0.17*v + 1.0*u^2 + -0.11*u*v + 0.07*v^2 <= 1.27
 and
   u in [-0.6,1.7]
   v in [-5.5,3.0]

 Query: Loop and Invariant and not Invariant'
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun u!FP () (_ FloatingPoint 8 24))
(declare-fun v!FP () (_ FloatingPoint 8 24))
(declare-fun uFP () (_ FloatingPoint 8 24))
(declare-fun vFP () (_ FloatingPoint 8 24))
(assert
 (let ((?x257 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7b #b00011110101110000101000) v!FP) v!FP)))
 (let ((?x24 (fp.add roundNearestTiesToEven ?x257 (fp.mul roundNearestTiesToEven (fp #b1 #x7e #b11100110011001100110011) u!FP))))
 (let ((?x241 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b1 #x7b #b11000010100011110101110) u!FP) v!FP)))
 (let ((?x127 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7f #b00000000000000000000000) u!FP) u!FP)))
 (let ((?x108 (fp.add roundNearestTiesToEven ?x127 (fp.add roundNearestTiesToEven ?x241 ?x24))))
 (let ((?x27 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7c #b01011100001010001111010) v!FP) ?x108)))
 (let (($x200 (fp.leq ?x27 (fp #b0 #x7f #b01000101000111101011100))))
 (let (($x123 (fp.leq v!FP (fp #b0 #x80 #b10000000000000000000000))))
 (let (($x33 (fp.leq (fp #b1 #x81 #b01100000000000000000000) v!FP)))
 (let (($x181 (fp.leq u!FP (fp #b0 #x7f #b10110011001100110011001))))
 (let (($x185 (fp.leq (fp #b1 #x7e #b00110011001100110011001) u!FP)))
 (let ((?x147 (fp.mul roundNearestTiesToEven (fp #b0 #x82 #b00111001111010111000010) uFP)))
 (let ((?x148 (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp.neg (fp #b0 #x7e #b00000000000000000000000)) vFP) ?x147)))
 (let ((?x150 (fp.add roundNearestTiesToEven vFP (fp.mul roundNearestTiesToEven (fp #b0 #x78 #b01000111101011100001010) ?x148))))
 (let ((?x141 (fp.add roundNearestTiesToEven uFP (fp.mul roundNearestTiesToEven (fp #b0 #x78 #b01000111101011100001010) vFP))))
 (let (($x142 (fp.eq u!FP ?x141)))
 (let ((?x136 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7b #b00011110101110000101000) vFP) vFP)))
 (let ((?x240 (fp.add roundNearestTiesToEven ?x136 (fp.mul roundNearestTiesToEven (fp #b1 #x7e #b11100110011001100110011) uFP))))
 (let ((?x243 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b1 #x7b #b11000010100011110101110) uFP) vFP)))
 (let ((?x105 (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7f #b00000000000000000000000) uFP) uFP)))
 (let ((?x285 (fp.add roundNearestTiesToEven ?x105 (fp.add roundNearestTiesToEven ?x243 ?x240))))
 (let ((?x264 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #x7c #b01011100001010001111010) vFP) ?x285)))
 (let (($x238 (fp.leq ?x264 (fp #b0 #x7f #b01000101000111101011100))))
 (let (($x92 (fp.leq vFP (fp #b0 #x80 #b10000000000000000000000))))
 (let (($x237 (fp.leq (fp #b1 #x81 #b01100000000000000000000) vFP)))
 (let (($x280 (fp.leq uFP (fp #b0 #x7f #b10110011001100110011001))))
 (let (($x102 (fp.leq (fp #b1 #x7e #b00110011001100110011001) uFP)))
 (and (and (and $x102 $x280 $x237 $x92) $x238 ) (and $x142 (fp.eq v!FP ?x150)) (or (not $x185) (not $x181) (not $x33) (not $x123) (not $x200)))))))))))))))))))))))))))))))
(check-sat)
(exit)
